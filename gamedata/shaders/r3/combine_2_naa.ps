#include "common.h"
#include "mblur.h"
#include "dof.h"

//////////////////////////////////////////////////////////////////////////////////////////
Texture2D 			s_distort;
#define	EPSDEPTH	0.001
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel

float4 main(v2p_aa_AA I) : SV_Target
{
	float4 Color = float4(0,0,0,0);
	int iSample = 0;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, I.HPos, iSample );
#else
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, iSample );
#endif
	
#ifdef 	USE_DISTORT
  float 	depth 	= gbd.P.z;
	float4 	distort	= s_distort.Sample(smp_nofilter, I.Tex0);
	float2	offset	= (distort.xy-(127.0h/255.0h))*def_distort;  // fix newtral offset
	float2	center	= I.Tex0 + offset;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, I.HPos, iSample );
#else
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, iSample);
#endif

	float 	depth_x	= gbdx.P.z;
	if ((depth_x+EPSDEPTH)<depth)	center	= I.Tex0;	// discard new sample
#else // USE_DISTORT
	float2	center 	= I.Tex0;
#endif

	float3 img	= dof(center);

	float4 	bloom	= s_bloom.Sample( smp_rtlinear, center);			
	bloom *= 0.5;
	bloom *= bloom;

#ifdef 	USE_DISTORT
 	float3	blurred	= bloom*def_hdr	;
	img		= lerp	(img,blurred,distort.z);
#endif

 	Color += combine_bloom( img, bloom );
	return Color;
}
