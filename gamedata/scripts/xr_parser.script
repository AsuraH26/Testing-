--[[
    Author: wh1t3lord (https://github.com/wh1t3lord)
    date: 30.08.2024
--]]

-- parsing without any allocation and returns string as we do in original pick_section_from_condlist
-- WARNING: don't pass section_name and field_name as nil lua can't detect the overload on C++ side and will cause throw, just pass an empty string ""
function pick_section_from_condlist(actor, client_or_server_object, section_name, field_name, string_for_parsing)
    if get_xr_parser_manager() then 
        --[[ if you need to test (first calling is CPP backend then original that compares result from CPP)
        
        local result = get_xr_parser_manager():pick_section_from_condlist(
            actor,
            client_or_server_object,
            section_name,
            field_name,
            string_for_parsing
        )
        
        local temp = xr_logic.parse_condlist(nil, section_name, field_name, string_for_parsing)
        local section= xr_logic.pick_section_from_condlist(actor, client_or_server_object, temp)

        if result ~= section then
            trigger_assert("xr_logic behaviour differs to xr_parser can't be!!! (report to wh1t3lord)")
        end

        return result

        ]]


        --[[ if you need to debug with LuaPanda use this template
            local temp = xr_logic.parse_condlist(nil, section_name, field_name, string_for_parsing)
            local section= xr_logic.pick_section_from_condlist(actor, client_or_server_object, temp)

            local result = "VasyanAnomaly"

            if result ~= section then
                result = get_xr_parser_manager():pick_section_from_condlist(
                    actor,
                    client_or_server_object,
                    section_name,
                    field_name,
                    string_for_parsing
                )

                if result ~= section then
                    trigger_assert("xr_logic behaviour differs to xr_parser can't be!!! (report to wh1t3lord)")
                end
            end

            return result    
        ]]

        --[[ use this version after tests
        return get_xr_parser_manager():pick_section_from_condlist(
            actor,
            client_or_server_object,
            section_name,
            field_name,
            string_for_parsing
        )
        --]]

        local result = get_xr_parser_manager():pick_section_from_condlist(
            actor,
            client_or_server_object,
            section_name,
            field_name,
            string_for_parsing
        )

        -- в силу того факта что у нас есть set блок в котором может быть выдача информации из-за этого поведение может хериться
        -- поэтому проверять мы должны со вторым вызовом т.к. если делать как раньше то разница возникнет потому что поменялась
        -- логика из-за выдачи информарции в set блоке и вот если на второй раз оно разное то правда что-то не так
        local compare_with = get_xr_parser_manager():pick_section_from_condlist(
            actor,
            client_or_server_object,
            section_name,
            field_name,
            string_for_parsing
        )

        local temp = xr_logic.parse_condlist(nil, section_name, field_name, string_for_parsing)
        local section= xr_logic.pick_section_from_condlist(actor, client_or_server_object, temp)

        if compare_with ~= section then
            trigger_assert(string_for_parsing.."\n".."["..section_name.."]".."["..field_name.."]".."result: '"..tostring(compare_with).."' section: '"..tostring(section).."'")
        end

        return result
    end

    return nil
end